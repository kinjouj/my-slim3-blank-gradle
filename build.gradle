buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.gradle.api.plugins:gradle-gae-plugin:0.8"
    }
}

ext {
    targetDir = "target"
}

buildDir = targetDir

repositories {
    mavenCentral()

    maven {
        url "http://maven.seasar.org/maven2"
    }
}

apply {
    plugin "war"
    plugin "gae"
    plugin "eclipse"
}

sourceSets {
    main {
        output.classesDir = "${buildDir}/classes"
        output.resourcesDir = "${buildDir}/classes"
    }

    test {
        output.classesDir = "${buildDir}/classes"
    }

    apt
}

dependencies {
    compile "javax.servlet:servlet-api:2.5"
    compile "com.google.appengine:appengine-api-1.0-sdk:1.7.3"
    compile "org.slim3:slim3:1.0.16"

    // gaeSdk "com.google.appengine:appengine-java-sdk:1.7.3"

    providedRuntime "com.google.appengine:appengine-local-runtime:1.7.0"
    providedRuntime "com.google.appengine:appengine-api-stubs:1.7.0"

    // ktrwjrを使わない場合はtestCompileスコープにする
    compile "junit:junit:4.11"

    aptCompile("org.slim3:slim3-gen:1.0.16") {
        exclude group: "org.apache.ant"
    }
}

eclipse {
    project {
        buildCommand "com.google.gdt.eclipse.core.webAppProjectValidator"
        buildCommand "com.google.appengine.eclipse.core.enhancerbuilder"
        buildCommand "com.google.appengine.eclipse.core.projectValidator"
    }
}

task compileAptJava(overwrite: true) {
    sourceSets.apt.output.resourcesDir.mkdir()

    ant.path(id: "aptFactoryPath", location: configurations.aptCompile.asPath)
    ant.apt(
        compile: false,
        includeAntRuntime: false,
        factorypathref: "aptFactoryPath",
        classpath: configurations.compile.asPath,
        preprocessdir: sourceSets.apt.output.resourcesDir,
        encoding: "UTF-8"
    ) {
        sourceSets.main.java.srcDirs.each {
            src(path: it)
        }
    }
}

compileAptJava.inputs.dir sourceSets.main.java.srcDirs
compileAptJava.outputs.dir sourceSets.apt.output.resourcesDir

compileJava.dependsOn compileAptJava
sourceSets.main.java.srcDirs += sourceSets.apt.output.resourcesDir

test.dependsOn {
    file("${buildDir}/classes").mkdirs()
    file("${buildDir}/resources/apt").mkdirs()

    apply from: "cobertura.gradle"
}

import groovy.xml.MarkupBuilder

def eclipseAptSettings = {
    def f = file(".settings/org.eclipse.jdt.apt.core.prefs")
    f.getParentFile().mkdirs()

    FileWriter w = new FileWriter(f)
    w.write("eclipse.preferences.version=1\n")
    w.write("org.eclipse.jdt.apt.aptEnabled=true\n")
    w.write("org.eclipse.jdt.apt.genSrcDir=target/resources/apt\n")
    w.write("org.eclipse.jdt.apt.reconcileEnabled=false")
    w.close()
}

def eclipseAptSettings_factorypath = {
    copy {
        from(configurations.aptCompile) {
            include "slim3-gen*"
        }

        into "lib"
    }

    def f = file(".factorypath")
    def w = new FileWriter(f)

    def xml = new MarkupBuilder(w)
    xml.setDoubleQuotes(true)

    xml."factorypath"() {
        "factorypathentry"(
            kind: "WKSPJAR",
            id: "/${project.name}/lib/slim3-gen-1.0.16.jar",
            enabled: true,
            runInBatchMode: false
        )
    }

    w.close()
}

tasks.eclipseClasspath {
    doFirst {
        file("${buildDir}/resources/apt").mkdirs();
    }
}

tasks.eclipseJdt {
    doFirst {
        eclipseAptSettings()
        eclipseAptSettings_factorypath()
    }
}

eclipse.classpath.file {
    whenMerged { classpath ->
        classpath.entries.findAll {}*.path = "${buildDir}/resources/apt"

        classpath.entries.findAll { entry ->
            entry.kind == "output"
        }*.path = "/${project.name}/${targetDir}/classes"
    }
}
